Title: CS 5435
Author: Haiwei Su
Date: 4th Nov. 2015

Cracking password in this homework can be viewed as reverse thinking as previous homework. In honeyword generation, as a password protector, he/she should try to know what types of passwords are more vulnerable to be attacked. For example, the top 100 commonly used passwords listed on rockyou password or users' personal information as password. Then, the goal of making honeyword is trying to design similar pattern of true password so that the attacks cannot distinguish between honeyword and true password. There's nothing attacks can learn from the pattern of sweet words give to them. Ideally, the guessing probability of a true password is 1/n where n is number of sweetword. 
Conversely, the design thinking on cracking a password is trying to understand the pattern of given sweet words, previous knowledge on commonly used password types and what information would users will put on their passwords. 
In our password cracking algorithm design, we started our password cracking target on rockyou password since they have limited pattern to learn (such as majority of passwords don't contain capital letters, or entire password is an English word etc.). For simplicity, given a list of sweet word, we separated password cases into 3 cases. First, passwords containing numbers only. Second, passwords mixed with letters and numbers. Third, passwords containing letters only. 
For the first case, we assumed that there are higher probability for users will choose sequence numbers as true password, for example, 12345, 54321, 987654321, 098765. Therefore, we first select all such type of passwords and then we will calculate the number of increasing sequence numbers vs. number of decreasing sequence numbers. Next, we choose the type with larger size. If the type we choose is increasing sequence number list, we will return the index with smallest numerical value, since we believe that users have prone to choose password starting with '1'. On the other hand, we will choose the largest decreasing sequence number such as 98765, since '9' is the right side of keyboard. 
For case 2, where sweet word mixed with letters and numbers, based on users common behavior, users are more likely to change appending numbers every time changing a new password. For example, cornell1992 -> cornell1993 -> cornell1990 etc. Therefore, our attacking strategy is find the numerical part and repeat the process we did for numerical password, i.e. collect majority pattern (either sequence number or other majority type, i.e. 199x, 200x) then choose the smallest one if it's an increasing sequence or choose the maximum one if it's in decreasing sequence. 
For case3, where sweetword containing only letters. Since we assume the true passwords are coming from rockyou password list. First, we scan the sweet word list and select the candidate with no capital letters or confusing characters, for example, some password will use '@' to represent '2', 'z' can confused with '2', letter 'o' can confused with number '0' and so on. Then next, we need to check if the password makes sense, i.e. if a password is an English word. Since we believe that users are likely to use simple English words as their password rather than some random letter combination because users are not willing to spend lots of times to memorize their password. Using simple English words can save their lots of time, therefore password candidate with real English meaning have higher chance to be true password. 
After every team member provides own output, our algorithm will perform a vote for all output list. If at the same index place, more than 1 output choose the same password as true password, algorithm will choose the majority vote. If none of candidates are same, we will randomly return one as true password. If one of index is null, which means the algorithm doesn't think any password is true, we will select the one is not null. Therefore, our algorithm final output will represent the majority vote from three individual password cracking function. 
Beyond the scope of rockyou password dataset, we also discussed broad sweet word pattern and possible password cracking technique. For example, we can use brutal force to solve the problem if the there's an ideal time and space situation (CPU processing speed, time constraint). we could also pattern analysis, for example, we pre - input commonly used password pattern for example, birthyear + firstname/workplace name , first+last initial and social security number, complete birth date, male and female first name.
